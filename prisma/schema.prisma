generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum ProgramType {
  PT_MANAGED    // Manually managed by trainer
  AI_ASSISTED   // Automated progression
}

enum Goal {
  HYPERTROPHY
  STRENGTH
}

model exercises {
  id                  Int                      @id @default(autoincrement())
  name                String                   @unique
  createdAt           DateTime                 @default(now()) @db.Timestamptz(0)
  completed_exercises completed_exercises[]
  muscle_groups       exercise_muscle_groups[]
  workout_exercises   workout_exercises[]
}

model programs {
  id          Int         @id @default(autoincrement())
  name        String
  userId      Int?
  goal        Goal @default(HYPERTROPHY)
  programType ProgramType @default(PT_MANAGED)
  startDate   DateTime    @default(now()) @db.Timestamptz(0)
  endDate     DateTime?   @db.Timestamptz(0)
  users       users?      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workouts    workouts[]
  progressionSettings program_progression_settings?

  @@index([userId], map: "programs_userId")
}

model program_progression_settings {
  id                    Int      @id @default(autoincrement())
  program_id           Int      @unique
  experienceLevel      String   // 'beginner', 'intermediate', 'advanced', 'advanced_plus'
  weeklyFrequency      Int
  lastDeloadDate       DateTime? @db.Timestamptz(0)
  nextDeloadDate       DateTime? @db.Timestamptz(0)
  program              programs  @relation(fields: [program_id], references: [id])
}

model sessions {
  id         Int       @id @default(autoincrement())
  workout_id Int?
  happened   DateTime? @db.Timestamptz(0)
  workouts   workouts? @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sessions_ibfk_1")

  @@index([workout_id], map: "workout_id")
}

model user_stats {
  userId   Int
  measured DateTime @id @db.Timestamptz(0)
  stats    Json?
  users    users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId], map: "user_stats_userId")
}

model users {
  id                       Int                   @id @default(autoincrement())
  username                 String                @unique @db.VarChar(255)
  password_hash            String
  firstname                String
  lastname                 String
  role                     UserRole
  created_at               DateTime?             @default(now()) @db.Timestamptz(0)
  trainerId                Int?
  emailVerified            Boolean               @default(false)
  verificationToken        String?
  verificationTokenExpires DateTime?             @db.Timestamptz(0)
  resetToken               String?
  resetTokenExpiry         DateTime?
  completed_exercises      completed_exercises[]
  programs                 programs[]
  user_stats               user_stats[]
  trainer                  users?                @relation("UserTrainer", fields: [trainerId], references: [id])
  clients                  users[]               @relation("UserTrainer")

  @@index([trainerId])
}

model workout_exercises {
  workout_id       Int
  exercise_id      Int
  sets             Int?
  reps             Int?
  weight           Decimal?    @db.Decimal(10, 2)
  order            Int
  createdAt        DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt        DateTime    @default(now()) @db.Timestamptz(0)
  first_supersets  supersets[] @relation("FirstExercise")
  second_supersets supersets[] @relation("SecondExercise")
  workouts         workouts    @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workout_exercises_ibfk_1")
  exercises        exercises   @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workout_exercises_ibfk_2")

  @@id([workout_id, exercise_id])
  @@index([exercise_id], map: "exercise_id")
}

model workouts {
  id                  Int                   @id @default(autoincrement())
  name                String
  program_id          Int?
  completed_exercises completed_exercises[]
  sessions            sessions[]
  supersets           supersets[]
  workout_exercises   workout_exercises[]
  programs            programs?             @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workouts_ibfk_1")

  @@index([program_id], map: "program_id")
}

model completed_exercises {
  id          Int       @id @default(autoincrement())
  sets        Int
  reps        Int
  weight      Decimal   @db.Decimal(10, 2)
  completedAt DateTime  @default(now()) @db.Timestamptz(0)
  exercise_id Int
  user_id     Int
  workout_id  Int
  exercise    exercises @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workout     workouts  @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "completed_exercises_user_id")
  @@index([workout_id], map: "completed_exercises_workout_id")
  @@index([exercise_id], map: "completed_exercises_exercise_id")
}

model muscle_groups {
  id        Int                      @id @default(autoincrement())
  name      String                   @unique
  exercises exercise_muscle_groups[]
}

model exercise_muscle_groups {
  exercise_id     Int
  muscle_group_id Int
  exercises       exercises     @relation(fields: [exercise_id], references: [id])
  muscle_groups   muscle_groups @relation(fields: [muscle_group_id], references: [id])

  @@id([exercise_id, muscle_group_id])
}

model supersets {
  id                 Int               @id @default(autoincrement())
  workout_id         Int
  first_exercise_id  Int
  second_exercise_id Int
  order              Int
  createdAt          DateTime          @default(now()) @db.Timestamptz(0)
  updatedAt          DateTime          @default(now()) @db.Timestamptz(0)
  first_exercise     workout_exercises @relation("FirstExercise", fields: [workout_id, first_exercise_id], references: [workout_id, exercise_id])
  workout            workouts          @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  second_exercise    workout_exercises @relation("SecondExercise", fields: [workout_id, second_exercise_id], references: [workout_id, exercise_id])

  @@unique([workout_id, first_exercise_id, second_exercise_id])
  @@index([workout_id])
  @@index([first_exercise_id])
  @@index([second_exercise_id])
}

enum UserRole {
  ADMIN
  TRAINER
  USER
}

enum MuscleGroup {
  Shoulder
  Arm
  Chest
  Abdominal
  Back
  Glute
  Leg
  Compound
}
