generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define an enum for user roles
enum UserRole {
  ADMIN
  TRAINER
  USER
}

model exercises {
  id                Int                 @id @default(autoincrement())
  name              String              @db.Text
  workout_exercises workout_exercises[]
  completed_exercises completed_exercises[]
}

model programs {
  id       Int        @id @default(autoincrement())
  name     String     @db.Text
  userId   Int?       // Assuming you add a userId field
  users    users?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workouts workouts[]

  @@index([userId], map: "userId")
}

model sessions {
  id         Int       @id @default(autoincrement())
  workout_id Int?
  happened   DateTime? @db.Timestamp(0)
  workouts   workouts? @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sessions_ibfk_1")

  @@index([workout_id], map: "workout_id")
}

model user_stats {
  userId   Int       // You'll decide if this is optional or not based on your application logic
  measured DateTime @id @db.Timestamp(0)
  stats    Json?
  users    users?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId], map: "userId")
}

model users {
  id            Int          @id @default(autoincrement())
  username      String       @unique @db.VarChar(255)
  password_hash String       @db.Text
  firstname     String
  lastname      String
  role          UserRole
  created_at    DateTime?    @default(now()) @db.Timestamp(0)
  programs      programs[]
  user_stats    user_stats[]
  trainerId     Int?         // Foreign key to reference the trainer's ID
  trainer       users?       @relation("UserTrainer", fields: [trainerId], references: [id]) // Trainer relation
  clients       users[]      @relation("UserTrainer") // Inverse relation for the trainer's clients
  completed_exercises completed_exercises[]

  @@index([trainerId]) // Optional: add index on trainerId for performance
}

model workout_exercises {
  workout_id  Int
  exercise_id Int
  sets        Int?
  reps        Int?
  weight      Decimal?  @db.Decimal(10, 2)
  workouts    workouts  @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workout_exercises_ibfk_1")
  exercises   exercises @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workout_exercises_ibfk_2")

  @@id([workout_id, exercise_id])
  @@index([exercise_id], map: "exercise_id")
}

model workouts {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.Text
  program_id         Int?
  sessions           sessions[]
  workout_exercises  workout_exercises[]
  completed_exercises completed_exercises[] // Add relation to completed_exercises
  programs           programs?            @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workouts_ibfk_1")

  @@index([program_id], map: "program_id")
}

model completed_exercises {
  id           Int       @id @default(autoincrement())
  userId       Int
  workoutId    Int        // Foreign key to reference the workout's ID
  exerciseId   Int
  sets         Int
  reps         Int
  weight       Decimal    @db.Decimal(10, 2)
  completedAt  DateTime   @default(now()) @db.Timestamp(0)
  
  user         users      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workout      workouts   @relation(fields: [workoutId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  exercise     exercises  @relation(fields: [exerciseId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId], map: "userId")
  @@index([workoutId], map: "workoutId")
  @@index([exerciseId], map: "exerciseId")
}