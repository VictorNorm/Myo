generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum ProgramType {
  PT_MANAGED    // Will be removed later
  AI_ASSISTED   // Will be removed later
  MANUAL        // New value
  AUTOMATED     // New value
}

enum ProgramStatus {
  PENDING    // Initial state when program is created
  ACTIVE     // Currently active program
  COMPLETED  // Program that was completed successfully
  ARCHIVED   // Program that was archived before completion
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Goal {
  HYPERTROPHY
  STRENGTH
}

enum Equipment {
  DUMBBELL
  BARBELL
  CABLE
  MACHINE
  BODYWEIGHT
}

enum ExerciseCategory {
  COMPOUND
  ISOLATION
}

model exercises {
  id                  Int                      @id @default(autoincrement())
  name                String                   @unique
  equipment           Equipment
  category            ExerciseCategory
  defaultIncrementKg  Decimal?                @db.Decimal(4, 2)  // For gym-specific increments
  minWeight           Decimal?                @db.Decimal(6, 2)  // Minimum possible weight
  maxWeight           Decimal?                @db.Decimal(6, 2)  // Maximum available weight
  notes               String?                 // For special instructions
  createdAt           DateTime                 @default(now()) @db.Timestamptz(0)

  progression_history progression_history[]
  completed_exercises completed_exercises[]
  muscle_groups       exercise_muscle_groups[]
  workout_exercises   workout_exercises[]
  baselines    exercise_baselines[]
}

model exercise_baselines {
  id          Int      @id @default(autoincrement())
  exercise_id Int
  user_id     Int
  program_id  Int
  weight      Decimal  @db.Decimal(6, 2)
  reps        Int
  sets        Int
  createdAt   DateTime @default(now()) @db.Timestamptz(0)
  
  exercise    exercises @relation(fields: [exercise_id], references: [id])
  user        users     @relation(fields: [user_id], references: [id])
  program     programs  @relation(fields: [program_id], references: [id])

  @@unique([exercise_id, user_id, program_id])
  @@index([exercise_id])
  @@index([user_id])
  @@index([program_id])
}

model programs {
  id          Int         @id @default(autoincrement())
  name        String
  userId      Int?
  goal        Goal @default(HYPERTROPHY)
  programType ProgramType @default(AUTOMATED)
  startDate   DateTime    @default(now()) @db.Timestamptz(0)
  endDate     DateTime?   @db.Timestamptz(0)
  status      ProgramStatus @default(PENDING)  // Add status field
  users       users?      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  totalWorkouts        Int      @default(0)

  workout_progress     workout_progress[]
  progression_history progression_history[]
  workouts    workouts[]
  progressionSettings program_progression_settings?
  baselines    exercise_baselines[]

  @@index([userId], map: "programs_userId")
}

model program_progression_settings {
  id                    Int      @id @default(autoincrement())
  program_id           Int      @unique
  experienceLevel      ExperienceLevel @default(BEGINNER)
  weeklyFrequency      Int
  lastDeloadDate       DateTime? @db.Timestamptz(0)
  nextDeloadDate       DateTime? @db.Timestamptz(0)
  program              programs  @relation(fields: [program_id], references: [id])
}

model sessions {
  id         Int       @id @default(autoincrement())
  workout_id Int?
  happened   DateTime? @db.Timestamptz(0)
  workouts   workouts? @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sessions_ibfk_1")

  @@index([workout_id], map: "workout_id")
}

model user_stats {
  userId   Int
  measured DateTime @id @db.Timestamptz(0)
  stats    Json?
  users    users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId], map: "user_stats_userId")
}

model users {
  id                       Int                   @id @default(autoincrement())
  username                 String                @unique @db.VarChar(255)
  password_hash            String
  firstname                String
  lastname                 String
  role                     UserRole
  created_at               DateTime?             @default(now()) @db.Timestamptz(0)
  trainerId                Int?
  emailVerified            Boolean               @default(false)
  verificationToken        String?
  verificationTokenExpires DateTime?             @db.Timestamptz(0)
  resetToken               String?
  resetTokenExpiry         DateTime?

  progression_history progression_history[]
  completed_exercises      completed_exercises[]
  programs                 programs[]
  user_stats               user_stats[]
  trainer                  users?                @relation("UserTrainer", fields: [trainerId], references: [id])
  clients                  users[]               @relation("UserTrainer")
  baselines    exercise_baselines[]
  workout_progress    workout_progress[]

  @@index([trainerId])
}

model workout_progress {
  id                Int       @id @default(autoincrement())
  user_id          Int
  program_id       Int
  workout_id       Int
  completed_at     DateTime
  next_scheduled_at DateTime?
  created_at       DateTime   @default(now()) @db.Timestamptz(0)
  updated_at       DateTime   @default(now()) @db.Timestamptz(0)
  user             users     @relation(fields: [user_id], references: [id])
  program          programs  @relation(fields: [program_id], references: [id])
  workout          workouts  @relation(fields: [workout_id], references: [id])

  @@unique([user_id, program_id, workout_id])
  @@index([user_id])
  @@index([program_id])
  @@index([workout_id])
}

model workout_exercises {
  workout_id       Int
  exercise_id      Int
  sets             Int?
  reps             Int?
  weight           Decimal?    @db.Decimal(10, 2)
  order            Int
  createdAt        DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt        DateTime    @default(now()) @db.Timestamptz(0)
  first_supersets  supersets[] @relation("FirstExercise")
  second_supersets supersets[] @relation("SecondExercise")
  workouts         workouts    @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workout_exercises_ibfk_1")
  exercises        exercises   @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workout_exercises_ibfk_2")

  @@id([workout_id, exercise_id])
  @@index([exercise_id], map: "exercise_id")
}

model workouts {
  id                  Int                   @id @default(autoincrement())
  name                String
  program_id          Int?
  completed_exercises completed_exercises[]
  sessions            sessions[]
  supersets           supersets[]
  workout_exercises   workout_exercises[]
  programs            programs?             @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "workouts_ibfk_1")

  workout_progress    workout_progress[]
  @@index([program_id], map: "program_id")
}

model completed_exercises {
  id          Int       @id @default(autoincrement())
  sets        Int
  reps        Int
  weight      Decimal   @db.Decimal(10, 2)
  completedAt DateTime  @default(now()) @db.Timestamptz(0)
  exercise_id Int
  user_id     Int
  workout_id  Int
  exercise    exercises @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workout     workouts  @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rating      Int?

  @@index([user_id], map: "completed_exercises_user_id")
  @@index([workout_id], map: "completed_exercises_workout_id")
  @@index([exercise_id], map: "completed_exercises_exercise_id")
}

model progression_history {
  id           Int       @id @default(autoincrement())
  exercise_id  Int
  user_id      Int
  program_id   Int
  oldWeight    Decimal   @db.Decimal(10, 2)
  newWeight    Decimal   @db.Decimal(10, 2)
  oldReps      Int
  newReps      Int
  reason       String    // e.g., "Weekly progression", "Deload", "Manual adjustment"
  createdAt    DateTime  @default(now()) @db.Timestamptz(0)
  
  exercise     exercises @relation(fields: [exercise_id], references: [id])
  user         users     @relation(fields: [user_id], references: [id])
  program      programs  @relation(fields: [program_id], references: [id])

  @@index([exercise_id])
  @@index([user_id])
  @@index([program_id])
}

model muscle_groups {
  id        Int                      @id @default(autoincrement())
  name      String                   @unique
  exercises exercise_muscle_groups[]
}

model exercise_muscle_groups {
  exercise_id     Int
  muscle_group_id Int
  exercises       exercises     @relation(fields: [exercise_id], references: [id])
  muscle_groups   muscle_groups @relation(fields: [muscle_group_id], references: [id])

  @@id([exercise_id, muscle_group_id])
}

model supersets {
  id                 Int               @id @default(autoincrement())
  workout_id         Int
  first_exercise_id  Int
  second_exercise_id Int
  order              Int
  createdAt          DateTime          @default(now()) @db.Timestamptz(0)
  updatedAt          DateTime          @default(now()) @db.Timestamptz(0)
  first_exercise     workout_exercises @relation("FirstExercise", fields: [workout_id, first_exercise_id], references: [workout_id, exercise_id])
  workout            workouts          @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  second_exercise    workout_exercises @relation("SecondExercise", fields: [workout_id, second_exercise_id], references: [workout_id, exercise_id])

  @@unique([workout_id, first_exercise_id, second_exercise_id])
  @@index([workout_id])
  @@index([first_exercise_id])
  @@index([second_exercise_id])
}

enum UserRole {
  ADMIN
  TRAINER
  USER
}

enum MuscleGroup {
  Shoulder
  Arm
  Chest
  Abdominal
  Back
  Glute
  Leg
  Compound
}
